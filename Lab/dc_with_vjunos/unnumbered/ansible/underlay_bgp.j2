interfaces {
{% for intf in interfaces -%}
    {{ intf }} {
        mtu 9000;
        unit 0 {
            family inet;
            family inet6;
        }
    }
{% endfor %}
    lo0 {
        unit 0 {
            family inet6 {
                address {{ loopback_ipv6 }};
            }
        }
    }
}
policy-options {
    policy-statement DIRECT-RTS {
        from protocol direct;
        then accept;
    }
    policy-statement lb {
        then {
            load-balance per-packet;
        }
    }
    as-list a-list members {{ as_list }};
}
routing-options {
    router-id {{ router_id }};
    forwarding-table {
        export lb;
    }
}
protocols {
    lldp {
        {% for intf in interfaces -%}
        interface {{ intf }};
        {% endfor -%}
    }
    router-advertisement {
        {% for intf in interfaces -%}
        interface {{ intf }}.0;
        {% endfor -%}
    }
    bgp {
        group auto-disc {
            family inet6 {
                unicast;
            }
            export DIRECT-RTS;
            local-as {{ local_as }};
            multipath {
                multiple-as;
            }
            dynamic-neighbor FABRIC {
                peer-auto-discovery {
                    family inet6 {
                        ipv6-nd;
                    }
                    {% for intf in interfaces -%}
                    interface {{ intf }}.0;
                    {% endfor -%}
                }
            }
            peer-as-list a-list;
        }
        group overlay-ipv6-ebgp {
            type external;
            multihop {
                no-nexthop-change;
            }
            local-address {{ overlay.local_addr }};
            family evpn {
                signaling;
            }
            local-as {{ overlay.local_as }};
            multipath {
                multiple-as;
            }
            {% for neigh in overlay.neighbors -%}
            neighbor {{ neigh.addr }} {
                peer-as {{ neigh.as }};
            }
            {% endfor -%}
        }
        multipath {
            multiple-as;
        }
    }
}
